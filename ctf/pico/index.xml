<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PicoCTF on d3bo</title><link>/ctf/pico/</link><description>Recent content in PicoCTF on d3bo</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright (c) 2025 Hyas</copyright><lastBuildDate>Mon, 08 Jan 2024 12:16:22 +0100</lastBuildDate><atom:link href="/ctf/pico/index.xml" rel="self" type="application/rss+xml"/><item><title>PIE TIME</title><link>/ctf/pico/pietime/</link><pubDate>Tue, 05 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/pietime/</guid><description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;signal.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; void segfault_handler() { printf(&amp;#34;Segfault Occurred, incorrect address.\n&amp;#34;); exit(0); } int win() { FILE *fptr; char c; printf(&amp;#34;You won!</description></item><item><title>Format strings 0</title><link>/ctf/pico/format-strings-0/</link><pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/format-strings-0/</guid><description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;signal.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;sys/types.h&amp;gt; #define BUFSIZE 32 #define FLAGSIZE 64 char flag[FLAGSIZE]; void sigsegv_handler(int sig) { printf(&amp;#34;\n%s\n&amp;#34;, flag); fflush(stdout); exit(1); } int on_menu(char *burger, char *menu[], int count) { for (int i = 0; i &amp;lt; count; i++) { if (strcmp(burger, menu[i]) == 0) return 1; } return 0; } void serve_patrick(); void serve_bob(); int main(int argc, char **argv){ FILE *f = fopen(&amp;#34;flag.</description></item><item><title>Unsubscriptions Are Free</title><link>/ctf/pico/unsuscriptions_are_free/</link><pubDate>Sun, 03 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/unsuscriptions_are_free/</guid><description>#include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;fcntl.h&amp;gt; #include &amp;lt;ctype.h&amp;gt; #define FLAG_BUFFER 200 #define LINE_BUFFER_SIZE 20 typedef struct { uintptr_t (*whatToDo)(); char *username; } cmd; char choice; cmd *user; void hahaexploitgobrrr(){ char buf[FLAG_BUFFER]; FILE *f = fopen(&amp;#34;flag.</description></item><item><title>tic-tac</title><link>/ctf/pico/tic-tac/</link><pubDate>Sat, 02 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/tic-tac/</guid><description>#include &amp;lt;iostream&amp;gt; #include &amp;lt;fstream&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;sys/stat.h&amp;gt; int main(int argc, char *argv[]) { if (argc != 2) { std::cerr &amp;lt;&amp;lt; &amp;#34;Usage: &amp;#34; &amp;lt;&amp;lt; argv[0] &amp;lt;&amp;lt; &amp;#34; &amp;lt;filename&amp;gt;&amp;#34; &amp;lt;&amp;lt; std::endl; return 1; } std::string filename = argv[1]; std::ifstream file(filename); struct stat statbuf; // Check the file&amp;#39;s status information.</description></item><item><title>Guessing Game 2</title><link>/ctf/pico/guessing-game-2/</link><pubDate>Fri, 01 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/guessing-game-2/</guid><description>#!/usr/bin/env python3 from pwn import * exe = ELF(&amp;#34;./vuln_patched&amp;#34;) context.binary = exe context.terminal = [&amp;#39;tmux&amp;#39;, &amp;#39;splitw&amp;#39;, &amp;#39;-h&amp;#39;] gdb_script = &amp;#39;&amp;#39;&amp;#39; b main b *0x080487ce continue &amp;#39;&amp;#39;&amp;#39; def conn(): if args.</description></item><item><title>Guessing Game 1</title><link>/ctf/pico/guessing-game-1/</link><pubDate>Thu, 31 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/guessing-game-1/</guid><description>#!/usr/bin/env python3 from pwn import * exe = ELF(&amp;#34;./vuln_patched&amp;#34;) context.binary = exe context.terminal = [&amp;#39;tmux&amp;#39;, &amp;#39;splitw&amp;#39;, &amp;#39;-h&amp;#39;] gdb_script = &amp;#39;&amp;#39;&amp;#39; b main b *0x00000000004163f4 b *0x000000000047ff91 b *0x0000000000400c6c continue &amp;#39;&amp;#39;&amp;#39; def conn(): if args.</description></item><item><title>Buffer Overflow 2</title><link>/ctf/pico/bufferoverflow-2/</link><pubDate>Fri, 25 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/bufferoverflow-2/</guid><description>#!/usr/bin/env python3 from pwn import * exe = ELF(&amp;#34;./vuln_patched&amp;#34;) context.binary = exe def conn(): if args.LOCAL: r = process([exe.path]) if args.</description></item><item><title>Buffer Overflow 0</title><link>/ctf/pico/bufferoverflow-0/</link><pubDate>Thu, 24 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/bufferoverflow-0/</guid><description>#!/usr/bin/env python3 from pwn import * exe = ELF(&amp;#34;./vuln_patched&amp;#34;) context.binary = exe def conn(): if args.LOCAL: r = process([exe.path]) if args.</description></item><item><title>Buffer Overflow 3</title><link>/ctf/pico/bufferoverflow3/</link><pubDate>Thu, 24 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/bufferoverflow3/</guid><description>#!/usr/bin/env python3 from pwn import * exe = ELF(&amp;#34;./vuln_patched_patched&amp;#34;, checksec=False) context.binary = exe context.terminal = [&amp;#34;alacritty&amp;#34;, &amp;#34;-e&amp;#34;] context.log_level = &amp;#39;warn&amp;#39; def conn(): if args.</description></item><item><title>ropfu</title><link>/ctf/pico/ropfu/</link><pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/ropfu/</guid><description>#!/usr/bin/env python3 from pwn import * from pwnlib.util.net import AddressFamily exe = ELF(&amp;#34;./vuln_patched&amp;#34;) context.binary = exe gdb_script = &amp;#39;&amp;#39;&amp;#39; b main b *0x80583b9 continue &amp;#39;&amp;#39;&amp;#39; context.</description></item></channel></rss>