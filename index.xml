<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>d3bo</title><link>/</link><description>Recent content on d3bo</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright (c) 2025 Hyas</copyright><lastBuildDate>Thu, 07 Sep 2023 16:33:54 +0200</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>write4</title><link>/ctf/rop-emporium/write4/</link><pubDate>Thu, 21 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/rop-emporium/write4/</guid><description>#!/usr/bin/env python3 from pwn import * exe = ELF(&amp;#34;./write4&amp;#34;) libc = ELF(&amp;#34;./libwrite4.so&amp;#34;) context.binary = exe context.terminal = [&amp;#39;tmux&amp;#39;, &amp;#39;splitw&amp;#39;, &amp;#39;-h&amp;#39;] gdb_script = &amp;#34;&amp;#34;&amp;#34; b main b *0x0000000000400691 b *0x0000000000400629 continue &amp;#34;&amp;#34;&amp;#34; def conn(): if args.</description></item><item><title>split</title><link>/ctf/rop-emporium/split/</link><pubDate>Wed, 20 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/rop-emporium/split/</guid><description>#!/usr/bin/env python3 from pwn import * exe = ELF(&amp;#34;./split_patched&amp;#34;) context.binary = exe def conn(): if args.LOCAL: r = process([exe.path]) if args.</description></item><item><title>ret2win</title><link>/ctf/rop-emporium/ret2win/</link><pubDate>Tue, 19 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/rop-emporium/ret2win/</guid><description>#!/usr/bin/env python3 from pwn import * exe = ELF(&amp;#34;./ret2win_patched&amp;#34;) context.binary = exe def conn(): if args.LOCAL: r = process([exe.path]) if args.</description></item><item><title>Old Memes Never Die</title><link>/ctf/why/callme/</link><pubDate>Mon, 18 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/why/callme/</guid><description>CODE /* Old Memes Never Die * compile without protection, because protection is for Tonies! * gcc -m32 -fno-stack-protector -o old-memes old-memes.</description></item><item><title>callme</title><link>/ctf/rop-emporium/callme/</link><pubDate>Sun, 17 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/rop-emporium/callme/</guid><description>{ setvbuf(_bss_start, 0LL, 2, 0LL); puts(&amp;#34;callme by ROP Emporium&amp;#34;); puts(&amp;#34;x86_64\n&amp;#34;); pwnme(); puts(&amp;#34;\nExiting&amp;#34;); return 0; } La función main llama a la función pwnme().</description></item><item><title>Function overwrite</title><link>/ctf/pico/function-overwrite/</link><pubDate>Sat, 16 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/function-overwrite/</guid><description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;sys/types.h&amp;gt; #include &amp;lt;wchar.h&amp;gt; #include &amp;lt;locale.h&amp;gt; #define BUFSIZE 64 #define FLAGSIZE 64 int calculate_story_score(char *story, size_t len) { int score = 0; for (size_t i = 0; i &amp;lt; len; i++) { score += story[i]; } return score; } void easy_checker(char *story, size_t len) { if (calculate_story_score(story, len) == 1337) { char buf[FLAGSIZE] = {0}; FILE *f = fopen(&amp;#34;flag.</description></item><item><title>x-sixty-what</title><link>/ctf/pico/x-sixty-what/</link><pubDate>Fri, 15 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/x-sixty-what/</guid><description>#!/usr/bin/env python3 from pwn import * HOST = &amp;#34;saturn.picoctf.net&amp;#34; PORT = 64947 exe = ELF(&amp;#34;./vuln_patched&amp;#34;) context.binary = exe context.terminal = [&amp;#39;tmux&amp;#39;, &amp;#39;splitw&amp;#39;, &amp;#39;-h&amp;#39;] #context.</description></item><item><title>badchars</title><link>/ctf/rop-emporium/badchars/</link><pubDate>Thu, 14 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/rop-emporium/badchars/</guid><description>#!/usr/bin/env python3 from pwn import * exe = ELF(&amp;#34;./badchars&amp;#34;) context.binary = exe context.terminal = [&amp;#34;alacritty&amp;#34;, &amp;#34;-e&amp;#34;] gdb_script = &amp;#34;&amp;#34;&amp;#34; b main b *0x000000000040069c continue &amp;#34;&amp;#34;&amp;#34; def conn(): if args.</description></item><item><title>clutter-overflow</title><link>/ctf/pico/clutter-overflow/</link><pubDate>Wed, 13 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/clutter-overflow/</guid><description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #define SIZE 0x100 #define GOAL 0xdeadbeef const char* HEADER = &amp;#34; ______________________________________________________________________\n&amp;#34; &amp;#34;|^ ^ ^ ^ ^ ^ |L L L L|^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^|\n&amp;#34; &amp;#34;| ^ ^ ^ ^ ^ ^| L L L | ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ |\n&amp;#34; &amp;#34;|^ ^ ^ ^ ^ ^ |L L L L|^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ==================^ ^ ^|\n&amp;#34; &amp;#34;| ^ ^ ^ ^ ^ ^| L L L | ^ ^ ^ ^ ^ ^ ___ ^ ^ ^ ^ / \\^ ^ |\n&amp;#34; &amp;#34;|^ ^_^ ^ ^ ^ =========^ ^ ^ ^ _ ^ / \\ ^ _ ^ / | | \\^ ^|\n&amp;#34; &amp;#34;| ^/_\\^ ^ ^ /_________\\^ ^ ^ /_\\ | // | /_\\ ^| | ____ ____ | | ^ |\n&amp;#34; &amp;#34;|^ =|= ^ =================^ ^=|=^| |^=|=^ | | {____}{____} | |^ ^|\n&amp;#34; &amp;#34;| ^ ^ ^ ^ | ========= |^ ^ ^ ^ ^\\___/^ ^ ^ ^| |__%%%%%%%%%%%%__| | ^ |\n&amp;#34; &amp;#34;|^ ^ ^ ^ ^| / ( \\ | ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ |/ %%%%%%%%%%%%%% \\|^ ^|\n&amp;#34; &amp;#34;.</description></item><item><title>basic-file-exploit</title><link>/ctf/pico/basic-file-exploit/</link><pubDate>Tue, 12 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/basic-file-exploit/</guid><description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdbool.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;ctype.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;sys/time.h&amp;gt; #include &amp;lt;sys/types.h&amp;gt; #define WAIT 60 static const char* flag = &amp;#34;[REDACTED]&amp;#34;; static char data[10][100]; static int input_lengths[10]; static int inputs = 0; int tgetinput(char *input, unsigned int l) { fd_set input_set; struct timeval timeout; int ready_for_reading = 0; int read_bytes = 0; if( l &amp;lt;= 0 ) { printf(&amp;#34;&amp;#39;l&amp;#39; for tgetinput must be greater than 0\n&amp;#34;); return -2; } /* Empty the FD Set */ FD_ZERO(&amp;amp;input_set ); /* Listen to the input descriptor */ FD_SET(STDIN_FILENO, &amp;amp;input_set); /* Waiting for some seconds */ timeout.</description></item></channel></rss>