<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>d3bo</title><link>/</link><description>Recent content on d3bo</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright (c) 2025 Hyas</copyright><lastBuildDate>Thu, 07 Sep 2023 16:33:54 +0200</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Local Target</title><link>/ctf/pico/local-target/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/local-target/</guid><description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; int main(){ FILE *fptr; char c; char input[16]; int num = 64; printf(&amp;#34;Enter a string: &amp;#34;); fflush(stdout); gets(input); printf(&amp;#34;\n&amp;#34;); printf(&amp;#34;num is %d\n&amp;#34;, num); fflush(stdout); if( num == 65 ){ printf(&amp;#34;You win!</description></item><item><title>hash-only-2</title><link>/ctf/pico/hash-only-2/</link><pubDate>Sat, 09 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/hash-only-2/</guid><description>Este reto es parecido al de hash-only-1, hay un binario con permisos SUID que ejecuta md5sum sin poner el path completo, pero en este estamos en una restricted bash y no se puede redirigir el output a un archivo y tampoco se puede modificar $PATH</description></item><item><title>hash-only-1</title><link>/ctf/pico/hash-only-1/</link><pubDate>Fri, 08 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/hash-only-1/</guid><description>bool main(void) { basic_ostream *pbVar1; basic_ostream&amp;lt;&amp;gt; *pbVar2; char *__command; long in_FS_OFFSET; bool bVar3; allocator&amp;lt;char&amp;gt; local_4d; int local_4c; basic_string&amp;lt;&amp;gt; local_48 [40]; long local_20; local_20 = *(long *)(in_FS_OFFSET + 0x28); pbVar1 = std::operator&amp;lt;&amp;lt;((basic_ostream *)std::cout, &amp;#34;Computing the MD5 hash of /root/flag.</description></item><item><title>Heap 2</title><link>/ctf/pico/heap2/</link><pubDate>Thu, 07 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/heap2/</guid><description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #define FLAGSIZE_MAX 64 int num_allocs; char *x; char *input_data; void win() { // Print flag char buf[FLAGSIZE_MAX]; FILE *fd = fopen(&amp;#34;flag.</description></item><item><title>PIE TIME 2</title><link>/ctf/pico/pietime2/</link><pubDate>Wed, 06 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/pietime2/</guid><description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;signal.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; void segfault_handler() { printf(&amp;#34;Segfault Occurred, incorrect address.\n&amp;#34;); exit(0); } void call_functions() { char buffer[64]; printf(&amp;#34;Enter your name:&amp;#34;); fgets(buffer, 64, stdin); printf(buffer); unsigned long val; printf(&amp;#34; enter the address to jump to, ex =&amp;gt; 0x12345: &amp;#34;); scanf(&amp;#34;%lx&amp;#34;, &amp;amp;val); void (*foo)(void) = (void (*)())val; foo(); } int win() { FILE *fptr; char c; printf(&amp;#34;You won!</description></item><item><title>PIE TIME</title><link>/ctf/pico/pietime/</link><pubDate>Tue, 05 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/pietime/</guid><description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;signal.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; void segfault_handler() { printf(&amp;#34;Segfault Occurred, incorrect address.\n&amp;#34;); exit(0); } int win() { FILE *fptr; char c; printf(&amp;#34;You won!</description></item><item><title>Format strings 0</title><link>/ctf/pico/format-strings-0/</link><pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/format-strings-0/</guid><description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;signal.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;sys/types.h&amp;gt; #define BUFSIZE 32 #define FLAGSIZE 64 char flag[FLAGSIZE]; void sigsegv_handler(int sig) { printf(&amp;#34;\n%s\n&amp;#34;, flag); fflush(stdout); exit(1); } int on_menu(char *burger, char *menu[], int count) { for (int i = 0; i &amp;lt; count; i++) { if (strcmp(burger, menu[i]) == 0) return 1; } return 0; } void serve_patrick(); void serve_bob(); int main(int argc, char **argv){ FILE *f = fopen(&amp;#34;flag.</description></item><item><title>Unsubscriptions Are Free</title><link>/ctf/pico/unsuscriptions_are_free/</link><pubDate>Sun, 03 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/unsuscriptions_are_free/</guid><description>#include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;fcntl.h&amp;gt; #include &amp;lt;ctype.h&amp;gt; #define FLAG_BUFFER 200 #define LINE_BUFFER_SIZE 20 typedef struct { uintptr_t (*whatToDo)(); char *username; } cmd; char choice; cmd *user; void hahaexploitgobrrr(){ char buf[FLAG_BUFFER]; FILE *f = fopen(&amp;#34;flag.</description></item><item><title>tic-tac</title><link>/ctf/pico/tic-tac/</link><pubDate>Sat, 02 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/tic-tac/</guid><description>#include &amp;lt;iostream&amp;gt; #include &amp;lt;fstream&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;sys/stat.h&amp;gt; int main(int argc, char *argv[]) { if (argc != 2) { std::cerr &amp;lt;&amp;lt; &amp;#34;Usage: &amp;#34; &amp;lt;&amp;lt; argv[0] &amp;lt;&amp;lt; &amp;#34; &amp;lt;filename&amp;gt;&amp;#34; &amp;lt;&amp;lt; std::endl; return 1; } std::string filename = argv[1]; std::ifstream file(filename); struct stat statbuf; // Check the file&amp;#39;s status information.</description></item><item><title>Guessing Game 2</title><link>/ctf/pico/guessing-game-2/</link><pubDate>Fri, 01 Aug 2025 00:00:00 +0000</pubDate><guid>/ctf/pico/guessing-game-2/</guid><description>#!/usr/bin/env python3 from pwn import * exe = ELF(&amp;#34;./vuln_patched&amp;#34;) context.binary = exe context.terminal = [&amp;#39;tmux&amp;#39;, &amp;#39;splitw&amp;#39;, &amp;#39;-h&amp;#39;] gdb_script = &amp;#39;&amp;#39;&amp;#39; b main b *0x080487ce continue &amp;#39;&amp;#39;&amp;#39; def conn(): if args.</description></item></channel></rss>